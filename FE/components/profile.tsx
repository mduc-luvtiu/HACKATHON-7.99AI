"use client"

import { useState, useEffect, useRef } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Switch } from "@/components/ui/switch"
import {
  User,
  Bell,
  Shield,
  CreditCard,
  Download,
  BarChart3,
  Clock,
  Video,
  MessageCircle,
  Brain,
  Crown,
  Star,
  TrendingUp,
} from "lucide-react"
import { api } from "@/lib/api"
import { MESSAGES } from "@/lib/messages"

interface ProfileProps {
  user: any
  onLogout: () => void
}

export function Profile({ user, onLogout }: ProfileProps) {
  const [notifications, setNotifications] = useState({
    aiSummary: true,
    newVideos: true,
    chatMessages: false,
    weeklyReport: true,
  })

  // Controlled state cho form
  const [fullName, setFullName] = useState(user?.full_name || "")
  const [email, setEmail] = useState(user?.email || "")
  const [bio, setBio] = useState(user?.bio || "")
  const [saving, setSaving] = useState(false)
  const [message, setMessage] = useState("")
  const [avatarUrl, setAvatarUrl] = useState(user?.avatar_url || "")
  const fileInputRef = useRef<HTMLInputElement>(null)

  // N·∫øu user thay ƒë·ªïi (do login/logout), c·∫≠p nh·∫≠t l·∫°i form
  useEffect(() => {
    setFullName(user?.full_name || "")
    setEmail(user?.email || "")
    setBio(user?.bio || "")
    setAvatarUrl(user?.avatar_url || "")
  }, [user])

  // L∆∞u thay ƒë·ªïi
  const handleSave = async () => {
    setSaving(true)
    setMessage("")
    try {
      // L·∫•y token t·ª´ localStorage
      const token = localStorage.getItem('token')
      if (!token) throw new Error(MESSAGES.AUTH.NOT_LOGGED_IN)
      // G·ªçi API c·∫≠p nh·∫≠t
      await api.auth.updateProfile(token, {
        full_name: fullName,
        email,
        bio,
      })
      setMessage(MESSAGES.USER.PROFILE_UPDATED)
    } catch (err: any) {
      setMessage(err.message || MESSAGES.USER.PROFILE_UPDATE_FAILED)
    } finally {
      setSaving(false)
    }
  }

  const handleAvatarChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]  
    if (!file) return
    const formData = new FormData()
    formData.append('avatar', file)
    const token = localStorage.getItem('token')
    try {
      const res = await fetch('/api/auth/avatar', {
        method: 'PUT',
        headers: { Authorization: `Bearer ${token}` },
        body: formData
      })
      const data = await res.json()
      if (data.success) {
        setAvatarUrl(data.data.avatar_url)
      } else {
        alert(data.message || MESSAGES.USER.AVATAR_UPDATE_FAILED)
      }
    } catch {
      alert(MESSAGES.USER.AVATAR_UPDATE_FAILED)
    }
  }

  const userStats = [
    { label: "Video ƒë√£ xem", value: "156", icon: Video, trend: "+12%" },
    { label: "Gi·ªù h·ªçc", value: "89h", icon: Clock, trend: "+8%" },
    { label: "AI Chat", value: "234", icon: MessageCircle, trend: "+25%" },
    { label: "ƒêi·ªÉm AI", value: "1,250", icon: Brain, trend: "+15%" },
  ]

  const achievements = [
    { name: "Video Explorer", description: "Xem 100+ video", icon: "üé¨", earned: true },
    { name: "AI Enthusiast", description: "S·ª≠ d·ª•ng AI 50+ l·∫ßn", icon: "ü§ñ", earned: true },
    { name: "Chat Master", description: "G·ª≠i 500+ tin nh·∫Øn", icon: "üí¨", earned: true },
    { name: "Learning Streak", description: "H·ªçc 30 ng√†y li√™n ti·∫øp", icon: "üî•", earned: false },
    { name: "Content Creator", description: "Upload 10+ video", icon: "üìπ", earned: false },
    { name: "Community Helper", description: "Gi√∫p ƒë·ª° 20+ ng∆∞·ªùi", icon: "ü§ù", earned: false },
  ]

  const recentActivity = [
    { action: "Xem video", content: "Machine Learning c∆° b·∫£n", time: "2 gi·ªù tr∆∞·ªõc" },
    { action: "AI Chat", content: "H·ªèi v·ªÅ Deep Learning", time: "3 gi·ªù tr∆∞·ªõc" },
    { action: "Upload video", content: "React Hooks Tutorial", time: "1 ng√†y tr∆∞·ªõc" },
    { action: "T√≥m t·∫Øt AI", content: "Python Data Science", time: "2 ng√†y tr∆∞·ªõc" },
    { action: "Chia s·∫ª", content: "Next.js App Router", time: "3 ng√†y tr∆∞·ªõc" },
  ]

  return (
    <div className="p-6 space-y-6 overflow-y-auto h-full">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">H·ªì s∆° c√° nh√¢n</h1>
          <p className="text-gray-600 mt-1">Qu·∫£n l√Ω th√¥ng tin v√† c√†i ƒë·∫∑t t√†i kho·∫£n</p>
        </div>
        <Badge className="bg-gradient-to-r from-yellow-400 to-orange-500 text-white">
          <Crown className="w-4 h-4 mr-1" />
          Premium
        </Badge>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Profile Info */}
        <div className="lg:col-span-1 space-y-6">
          <Card>
            <CardContent className="p-6 text-center">
              <div className="w-24 h-24 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 relative group">
                {avatarUrl ? (
                  <img src={avatarUrl} alt="avatar" className="w-24 h-24 rounded-full object-cover" />
                ) : (
                  <User className="w-12 h-12 text-white" />
                )}
                <button
                  className="absolute bottom-0 right-0 bg-white rounded-full p-1 shadow group-hover:scale-110 transition"
                  onClick={() => fileInputRef.current?.click()}
                  title="ƒê·ªïi avatar"
                >
                  <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24"><path d="M15.232 5.232l3.536 3.536M9 11l6 6M3 21h18" /></svg>
                </button>
                <input
                  type="file"
                  accept="image/*"
                  className="hidden"
                  ref={fileInputRef}
                  onChange={handleAvatarChange}
                />
              </div>
              <h2 className="text-xl font-bold text-gray-900">{user?.full_name || "Ch∆∞a c√≥ t√™n"}</h2>
              <p className="text-gray-600">{user?.email || "Ch∆∞a c√≥ email"}</p>
              <div className="flex items-center justify-center space-x-2 mt-2">
                <Badge variant="secondary">AI Enthusiast</Badge>
                <Badge className="bg-yellow-500">Level 5</Badge>
              </div>
              <Button className="w-full mt-4" onClick={onLogout}>ƒêƒÉng xu·∫•t</Button>
            </CardContent>
          </Card>

          {/* Stats */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <BarChart3 className="w-5 h-5 mr-2" />
                Th·ªëng k√™
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {userStats.map((stat, index) => {
                const Icon = stat.icon
                return (
                  <div key={index} className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Icon className="w-5 h-5 text-gray-600" />
                      <span className="text-sm text-gray-600">{stat.label}</span>
                    </div>
                    <div className="text-right">
                      <div className="font-semibold">{stat.value}</div>
                      <div className="text-xs text-green-600 flex items-center">
                        <TrendingUp className="w-3 h-3 mr-1" />
                        {stat.trend}
                      </div>
                    </div>
                  </div>
                )
              })}
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <div className="lg:col-span-2">
          <Tabs defaultValue="settings" className="w-full">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="settings">C√†i ƒë·∫∑t</TabsTrigger>
              <TabsTrigger value="activity">Ho·∫°t ƒë·ªông</TabsTrigger>
              <TabsTrigger value="achievements">Th√†nh t√≠ch</TabsTrigger>
              <TabsTrigger value="subscription">G√≥i d·ªãch v·ª•</TabsTrigger>
            </TabsList>

            <TabsContent value="settings" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Th√¥ng tin c√° nh√¢n</CardTitle>
                  <CardDescription>C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">H·ªç v√† t√™n</label>
                      <Input value={fullName} onChange={(e) => setFullName(e.target.value)} />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Email</label>
                      <Input value={email} onChange={(e) => setEmail(e.target.value)} />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Bio</label>
                    <Textarea value={bio} onChange={(e) => setBio(e.target.value)} placeholder="Gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n..." />
                  </div>
                  <Button onClick={handleSave} disabled={saving}>L∆∞u thay ƒë·ªïi</Button>
                  {message && <div className="text-green-600 mt-2">{message}</div>}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Bell className="w-5 h-5 mr-2" />
                    Th√¥ng b√°o
                  </CardTitle>
                  <CardDescription>Qu·∫£n l√Ω c√°c th√¥ng b√°o b·∫°n mu·ªën nh·∫≠n</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium">T√≥m t·∫Øt AI</h4>
                      <p className="text-sm text-gray-600">Nh·∫≠n th√¥ng b√°o khi AI ho√†n th√†nh t√≥m t·∫Øt video</p>
                    </div>
                    <Switch
                      checked={notifications.aiSummary}
                      onCheckedChange={(checked) => setNotifications({ ...notifications, aiSummary: checked })}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium">Video m·ªõi</h4>
                      <p className="text-sm text-gray-600">Th√¥ng b√°o v·ªÅ video m·ªõi ƒë∆∞·ª£c th√™m</p>
                    </div>
                    <Switch
                      checked={notifications.newVideos}
                      onCheckedChange={(checked) => setNotifications({ ...notifications, newVideos: checked })}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium">Tin nh·∫Øn chat</h4>
                      <p className="text-sm text-gray-600">Th√¥ng b√°o tin nh·∫Øn m·ªõi trong chat</p>
                    </div>
                    <Switch
                      checked={notifications.chatMessages}
                      onCheckedChange={(checked) => setNotifications({ ...notifications, chatMessages: checked })}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium">B√°o c√°o h√†ng tu·∫ßn</h4>
                      <p className="text-sm text-gray-600">Nh·∫≠n b√°o c√°o ho·∫°t ƒë·ªông h√†ng tu·∫ßn</p>
                    </div>
                    <Switch
                      checked={notifications.weeklyReport}
                      onCheckedChange={(checked) => setNotifications({ ...notifications, weeklyReport: checked })}
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Shield className="w-5 h-5 mr-2" />
                    B·∫£o m·∫≠t
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Button variant="outline" className="w-full bg-transparent">
                    ƒê·ªïi m·∫≠t kh·∫©u
                  </Button>
                  <Button variant="outline" className="w-full bg-transparent">
                    X√°c th·ª±c 2 b∆∞·ªõc
                  </Button>
                  <Button variant="outline" className="w-full bg-transparent">
                    Qu·∫£n l√Ω phi√™n ƒëƒÉng nh·∫≠p
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="activity" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</CardTitle>
                  <CardDescription>L·ªãch s·ª≠ ho·∫°t ƒë·ªông c·ªßa b·∫°n tr√™n platform</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {recentActivity.map((activity, index) => (
                      <div key={index} className="flex items-center space-x-4 p-3 border rounded-lg">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2">
                            <span className="font-medium text-sm">{activity.action}</span>
                            <span className="text-sm text-gray-600">‚Ä¢</span>
                            <span className="text-sm text-gray-600">{activity.content}</span>
                          </div>
                          <p className="text-xs text-gray-500">{activity.time}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                  <Button variant="outline" className="w-full mt-4 bg-transparent">
                    <Download className="w-4 h-4 mr-2" />
                    T·∫£i xu·ªëng d·ªØ li·ªáu
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="achievements" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Th√†nh t√≠ch</CardTitle>
                  <CardDescription>C√°c th√†nh t√≠ch b·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c v√† ƒëang theo ƒëu·ªïi</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {achievements.map((achievement, index) => (
                      <div
                        key={index}
                        className={`p-4 border rounded-lg ${
                          achievement.earned ? "bg-green-50 border-green-200" : "bg-gray-50 border-gray-200"
                        }`}
                      >
                        <div className="flex items-center space-x-3">
                          <div className="text-2xl">{achievement.icon}</div>
                          <div className="flex-1">
                            <h3 className="font-medium">{achievement.name}</h3>
                            <p className="text-sm text-gray-600">{achievement.description}</p>
                          </div>
                          {achievement.earned && (
                            <Badge className="bg-green-500">
                              <Star className="w-3 h-3 mr-1" />
                              ƒê·∫°t ƒë∆∞·ª£c
                            </Badge>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="subscription" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <CreditCard className="w-5 h-5 mr-2" />
                    G√≥i d·ªãch v·ª• hi·ªán t·∫°i
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="bg-gradient-to-r from-yellow-50 to-orange-50 p-6 rounded-lg border border-yellow-200">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-2">
                        <Crown className="w-6 h-6 text-yellow-600" />
                        <h3 className="text-xl font-bold text-gray-900">Premium Plan</h3>
                      </div>
                      <Badge className="bg-yellow-500 text-white">ƒêang ho·∫°t ƒë·ªông</Badge>
                    </div>
                    <p className="text-gray-600 mb-4">
                      Truy c·∫≠p kh√¥ng gi·ªõi h·∫°n t·∫•t c·∫£ t√≠nh nƒÉng AI, thuy·∫øt minh real-time, v√† chat th√¥ng minh
                    </p>
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div>
                        <p className="text-sm text-gray-600">Ng√†y gia h·∫°n</p>
                        <p className="font-semibold">15/02/2024</p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-600">Gi√°</p>
                        <p className="font-semibold">299,000 VNƒê/th√°ng</p>
                      </div>
                    </div>
                    <div className="flex space-x-2">
                      <Button variant="outline">Qu·∫£n l√Ω thanh to√°n</Button>
                      <Button variant="outline">H·ªßy g√≥i</Button>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>T√≠nh nƒÉng Premium</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                      <div>
                        <h4 className="font-medium">Thuy·∫øt minh AI kh√¥ng gi·ªõi h·∫°n</h4>
                        <p className="text-sm text-gray-600">S·ª≠ d·ª•ng t√≠nh nƒÉng thuy·∫øt minh cho t·∫•t c·∫£ video</p>
                      </div>
                    </div>
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                      <div>
                        <h4 className="font-medium">Chat AI n√¢ng cao</h4>
                        <p className="text-sm text-gray-600">Ph√¢n t√≠ch c·∫£m x√∫c v√† g·ª£i √Ω th√¥ng minh</p>
                      </div>
                    </div>
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                      <div>
                        <h4 className="font-medium">Upload video kh√¥ng gi·ªõi h·∫°n</h4>
                        <p className="text-sm text-gray-600">T·∫£i l√™n video v·ªõi dung l∆∞·ª£ng l·ªõn</p>
                      </div>
                    </div>
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                      <div>
                        <h4 className="font-medium">B√°o c√°o chi ti·∫øt</h4>
                        <p className="text-sm text-gray-600">Ph√¢n t√≠ch h·ªçc t·∫≠p v√† ti·∫øn ƒë·ªô c√° nh√¢n</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  )
}
