#!/usr/bin/env python3
"""
Streamlit Chatbot Component t√≠ch h·ª£p v·ªõi chatbot.py
"""

import streamlit as st
import os
import json
import sys
import subprocess
from pathlib import Path
from datetime import datetime


class StreamlitChatbot:
    def __init__(self):
        self.chatbot_dir = "rag_chatbot"
        self.metadata_file = "voice_segments_metadata.json"
        self.chatbot_metadata_file = os.path.join(
            self.chatbot_dir, "chatbot_metadata.json")

    def setup_chatbot_environment(self):
        """Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng cho chatbot"""
        # T·∫°o th∆∞ m·ª•c rag_chatbot n·∫øu ch∆∞a c√≥
        os.makedirs(self.chatbot_dir, exist_ok=True)

        # Copy voice_segments_metadata.json v√†o th∆∞ m·ª•c rag_chatbot
        if os.path.exists(self.metadata_file):
            import shutil
            shutil.copy2(self.metadata_file, os.path.join(
                self.chatbot_dir, "voice_segments_metadata.json"))
            st.success("‚úÖ ƒê√£ copy metadata v√†o th∆∞ m·ª•c chatbot")
        else:
            st.warning("‚ö†Ô∏è Ch∆∞a c√≥ file voice_segments_metadata.json")

    def get_chatbot_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i chatbot"""
        metadata_path = os.path.join(
            self.chatbot_dir, "voice_segments_metadata.json")
        chatbot_metadata_path = os.path.join(
            self.chatbot_dir, "chatbot_metadata.json")

        status = {
            "has_metadata": os.path.exists(metadata_path),
            "has_chatbot_metadata": os.path.exists(chatbot_metadata_path),
            "metadata_count": 0,
            "last_updated": None
        }

        if status["has_metadata"]:
            try:
                with open(metadata_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    status["metadata_count"] = len(data)
            except:
                pass

        if status["has_chatbot_metadata"]:
            try:
                with open(chatbot_metadata_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    status["last_updated"] = data.get('last_updated')
            except:
                pass

        return status

    def initialize_chatbot(self):
        """Kh·ªüi t·∫°o chatbot"""
        try:
            # Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c chatbot
            original_dir = os.getcwd()
            os.chdir(self.chatbot_dir)

            # Ch·∫°y script kh·ªüi t·∫°o chatbot
            result = subprocess.run(
                [sys.executable, "chatbot.py"],
                capture_output=True, text=True, encoding='utf-8',
                timeout=30  # Timeout 30 gi√¢y
            )

            # Quay l·∫°i th∆∞ m·ª•c g·ªëc
            os.chdir(original_dir)

            if result.returncode == 0:
                return True, "Chatbot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng"
            else:
                return False, f"L·ªói kh·ªüi t·∫°o chatbot: {result.stderr}"

        except subprocess.TimeoutExpired:
            os.chdir(original_dir)
            return False, "Timeout khi kh·ªüi t·∫°o chatbot"
        except Exception as e:
            os.chdir(original_dir)
            return False, f"L·ªói: {str(e)}"

    def chat_with_video(self, query):
        """Chat v·ªõi video content"""
        try:
            # Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c chatbot
            original_dir = os.getcwd()
            os.chdir(self.chatbot_dir)

            # Import c√°c module c·∫ßn thi·∫øt
            sys.path.append(os.getcwd())

            try:
                from rag_engine import RAGEngine
                from pinecone_db import PineconeDB
                from deep_translator import GoogleTranslator

                # Kh·ªüi t·∫°o RAG engine
                rag = RAGEngine()
                db = PineconeDB()
                namespace = "mini_visione"

                # G·ª≠i query
                result = rag.chat(query, namespace)

                # D·ªãch sang ti·∫øng Vi·ªát
                response_en = result['response']
                response_vi = GoogleTranslator(
                    source='auto', target='vi').translate(response_en)

                os.chdir(original_dir)
                return True, response_vi

            except ImportError as e:
                os.chdir(original_dir)
                return False, f"L·ªói import module: {str(e)}"
            except Exception as e:
                os.chdir(original_dir)
                return False, f"L·ªói chat: {str(e)}"

        except Exception as e:
            return False, f"L·ªói h·ªá th·ªëng: {str(e)}"

    def get_video_info(self):
        """L·∫•y th√¥ng tin video t·ª´ chatbot metadata"""
        chatbot_metadata_path = os.path.join(
            self.chatbot_dir, "chatbot_metadata.json")

        if os.path.exists(chatbot_metadata_path):
            try:
                with open(chatbot_metadata_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return {
                        "title": data.get('video_title', 'Unknown'),
                        "url": data.get('video_url', 'Unknown'),
                        "last_updated": data.get('last_updated', 'Unknown')
                    }
            except:
                pass

        return None

    def render_chat_interface(self):
        """Render giao di·ªán chat"""
        st.markdown("### ü§ñ Video Chatbot")

        # Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng
        self.setup_chatbot_environment()

        # Ki·ªÉm tra tr·∫°ng th√°i
        status = self.get_chatbot_status()

        # Hi·ªÉn th·ªã tr·∫°ng th√°i
        if status["has_metadata"]:
            st.success(
                f"‚úÖ ƒê√£ t·∫£i {status['metadata_count']} ƒëo·∫°n n·ªôi dung video")

            # Hi·ªÉn th·ªã th√¥ng tin video
            video_info = self.get_video_info()
            if video_info:
                st.info(f"üìπ **Video:** {video_info['title']}")
                if video_info['last_updated']:
                    st.info(f"üìÖ **C·∫≠p nh·∫≠t:** {video_info['last_updated']}")
        else:
            st.warning(
                "‚ö†Ô∏è Ch∆∞a c√≥ n·ªôi dung video. H√£y t·∫°o video thuy·∫øt minh tr∆∞·ªõc!")
            return

        # N√∫t kh·ªüi t·∫°o chatbot
        if st.button("üöÄ Kh·ªüi t·∫°o Chatbot", help="Kh·ªüi t·∫°o chatbot ƒë·ªÉ c√≥ th·ªÉ chat"):
            with st.spinner("üîÑ ƒêang kh·ªüi t·∫°o chatbot..."):
                success, message = self.initialize_chatbot()
                if success:
                    st.success(message)
                else:
                    st.error(message)

        # C√¢u h·ªèi th∆∞·ªùng g·∫∑p
        st.markdown("**üí° C√¢u h·ªèi th∆∞·ªùng g·∫∑p:**")
        common_questions = [
            "T√≥m t·∫Øt video",
            "N·ªôi dung ch√≠nh c·ªßa video",
            "Video n√≥i v·ªÅ ch·ªß ƒë·ªÅ g√¨?",
            "C√≥ bao nhi√™u ƒëo·∫°n trong video?",
            "T√¨m t·ª´ kh√≥a 'h·ªçc'",
            "T√¨m t·ª´ kh√≥a 'ti·∫øng Anh'"
        ]

        # T·∫°o buttons cho c√¢u h·ªèi th∆∞·ªùng g·∫∑p
        cols = st.columns(2)
        for i, question in enumerate(common_questions):
            col = cols[i % 2]
            if col.button(question, key=f"q_{i}"):
                st.session_state.chat_input = question

        # Input chat
        if "chat_input" not in st.session_state:
            st.session_state.chat_input = ""

        user_input = st.text_input(
            "üí¨ Nh·∫≠p c√¢u h·ªèi:",
            value=st.session_state.chat_input,
            placeholder="V√≠ d·ª•: T√≥m t·∫Øt video, T√¨m t·ª´ kh√≥a 'h·ªçc'..."
        )

        # Clear input after use
        if st.session_state.chat_input:
            st.session_state.chat_input = ""

        # Process query
        if user_input:
            with st.spinner("ü§î ƒêang x·ª≠ l√Ω..."):
                success, response = self.chat_with_video(user_input)

            if success:
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.markdown("**ü§ñ Tr·∫£ l·ªùi:**")
                st.write(response)

                # L∆∞u v√†o l·ªãch s·ª≠ chat
                if "chat_history" not in st.session_state:
                    st.session_state.chat_history = []

                st.session_state.chat_history.append({
                    "user": user_input,
                    "bot": response,
                    "timestamp": datetime.now().strftime("%H:%M:%S")
                })
            else:
                st.error(f"‚ùå L·ªói: {response}")
                st.info("üí° H√£y th·ª≠ nh·∫•n n√∫t 'Kh·ªüi t·∫°o Chatbot' tr∆∞·ªõc khi chat")

        # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
        if "chat_history" in st.session_state and st.session_state.chat_history:
            st.markdown("---")
            st.markdown("**üìù L·ªãch s·ª≠ chat:**")

            # Hi·ªÉn th·ªã 5 tin nh·∫Øn g·∫ßn nh·∫•t
            for i, chat in enumerate(st.session_state.chat_history[-5:]):
                with st.expander(f"üí¨ {chat['user'][:50]}... ({chat['timestamp']})", expanded=False):
                    st.write(f"**B·∫°n:** {chat['user']}")
                    st.write(f"**Bot:** {chat['bot']}")

            # N√∫t x√≥a l·ªãch s·ª≠
            if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat"):
                st.session_state.chat_history = []
                st.rerun()
