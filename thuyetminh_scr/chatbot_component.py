#!/usr/bin/env python3
"""
Chatbot Component for Streamlit
T∆∞∆°ng t√°c v·ªõi video content
"""

import streamlit as st
import json
import os
from pathlib import Path
from deep_translator import GoogleTranslator


class VideoChatbot:
    def __init__(self):
        self.chat_history = []
        self.metadata_file = "voice_segments_metadata.json"

    def load_video_content(self):
        """Load video content from metadata"""
        if os.path.exists(self.metadata_file):
            try:
                with open(self.metadata_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return []
        return []

    def get_video_summary(self, content):
        """T·∫°o t√≥m t·∫Øt video t·ª´ content"""
        if not content:
            return "Ch∆∞a c√≥ n·ªôi dung video ƒë·ªÉ ph√¢n t√≠ch."

        # ƒê·∫øm s·ªë segment
        total_segments = len(content)

        # L·∫•y text t·ª´ c√°c segment
        texts = [item.get('text', '') for item in content if item.get('text')]

        # T·∫°o t√≥m t·∫Øt ƒë∆°n gi·∫£n
        summary = f"Video c√≥ {total_segments} ƒëo·∫°n n·ªôi dung.\n\n"

        if texts:
            # L·∫•y 3 ƒëo·∫°n ƒë·∫ßu ti√™n l√†m preview
            preview_texts = texts[:3]
            summary += "N·ªôi dung ch√≠nh:\n"
            for i, text in enumerate(preview_texts, 1):
                summary += f"{i}. {text}\n"

            if len(texts) > 3:
                summary += f"\n... v√† {len(texts) - 3} ƒëo·∫°n kh√°c."

        return summary

    def search_content(self, query, content):
        """T√¨m ki·∫øm trong n·ªôi dung video"""
        if not content:
            return "Ch∆∞a c√≥ n·ªôi dung video ƒë·ªÉ t√¨m ki·∫øm."

        query_lower = query.lower()
        results = []

        for i, item in enumerate(content):
            text = item.get('text', '').lower()
            if query_lower in text:
                start_time = item.get('start', 0)
                end_time = item.get('end', 0)
                original_text = item.get('text', '')

                results.append({
                    'segment': i + 1,
                    'time': f"{start_time:.1f}s - {end_time:.1f}s",
                    'text': original_text
                })

        if results:
            response = f"T√¨m th·∫•y {len(results)} k·∫øt qu·∫£ cho '{query}':\n\n"
            for result in results[:5]:  # Gi·ªõi h·∫°n 5 k·∫øt qu·∫£
                response += f"ƒêo·∫°n {result['segment']} ({result['time']}):\n"
                response += f"{result['text']}\n\n"

            if len(results) > 5:
                response += f"... v√† {len(results) - 5} k·∫øt qu·∫£ kh√°c."
        else:
            response = f"Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho '{query}'."

        return response

    def get_common_questions(self):
        """Tr·∫£ v·ªÅ danh s√°ch c√¢u h·ªèi th∆∞·ªùng g·∫∑p"""
        return [
            "T√≥m t·∫Øt video",
            "N·ªôi dung ch√≠nh c·ªßa video",
            "Video n√≥i v·ªÅ ch·ªß ƒë·ªÅ g√¨?",
            "C√≥ bao nhi√™u ƒëo·∫°n trong video?",
            "T√¨m t·ª´ kh√≥a 'h·ªçc'",
            "T√¨m t·ª´ kh√≥a 'ti·∫øng Anh'"
        ]

    def process_query(self, query):
        """X·ª≠ l√Ω c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng"""
        content = self.load_video_content()

        query_lower = query.lower()

        # X·ª≠ l√Ω c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p
        if any(keyword in query_lower for keyword in ['t√≥m t·∫Øt', 'summary', 't·ªïng quan']):
            return self.get_video_summary(content)

        elif any(keyword in query_lower for keyword in ['n·ªôi dung', 'content', 'ch·ªß ƒë·ªÅ', 'topic']):
            if content:
                return f"Video c√≥ {len(content)} ƒëo·∫°n n·ªôi dung v·ªÅ ch·ªß ƒë·ªÅ h·ªçc ti·∫øng Anh."
            else:
                return "Ch∆∞a c√≥ n·ªôi dung video ƒë·ªÉ ph√¢n t√≠ch."

        elif any(keyword in query_lower for keyword in ['t√¨m', 'search', 'ki·∫øm']):
            # Tr√≠ch xu·∫•t t·ª´ kh√≥a t√¨m ki·∫øm
            search_terms = ['t√¨m', 'search', 'ki·∫øm']
            for term in search_terms:
                if term in query_lower:
                    keyword = query_lower.split(term)[-1].strip()
                    if keyword:
                        return self.search_content(keyword, content)
            return "Vui l√≤ng cung c·∫•p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm."

        elif any(keyword in query_lower for keyword in ['bao nhi√™u', 'count', 's·ªë l∆∞·ª£ng']):
            if content:
                return f"Video c√≥ {len(content)} ƒëo·∫°n n·ªôi dung."
            else:
                return "Ch∆∞a c√≥ n·ªôi dung video."

        else:
            # T√¨m ki·∫øm chung trong n·ªôi dung
            return self.search_content(query, content)

    def render_chat_interface(self):
        """Render giao di·ªán chat"""
        st.markdown("### ü§ñ Video Chatbot")

        # Hi·ªÉn th·ªã th√¥ng tin video hi·ªán t·∫°i
        content = self.load_video_content()
        if content:
            st.success(f"‚úÖ ƒê√£ t·∫£i {len(content)} ƒëo·∫°n n·ªôi dung video")
        else:
            st.warning(
                "‚ö†Ô∏è Ch∆∞a c√≥ n·ªôi dung video. H√£y t·∫°o video thuy·∫øt minh tr∆∞·ªõc!")

        # C√¢u h·ªèi th∆∞·ªùng g·∫∑p
        st.markdown("**üí° C√¢u h·ªèi th∆∞·ªùng g·∫∑p:**")
        common_questions = self.get_common_questions()

        # T·∫°o buttons cho c√¢u h·ªèi th∆∞·ªùng g·∫∑p
        cols = st.columns(2)
        for i, question in enumerate(common_questions):
            col = cols[i % 2]
            if col.button(question, key=f"q_{i}"):
                st.session_state.chat_input = question

        # Input chat
        if "chat_input" not in st.session_state:
            st.session_state.chat_input = ""

        user_input = st.text_input(
            "üí¨ Nh·∫≠p c√¢u h·ªèi:",
            value=st.session_state.chat_input,
            placeholder="V√≠ d·ª•: T√≥m t·∫Øt video, T√¨m t·ª´ kh√≥a 'h·ªçc'..."
        )

        # Clear input after use
        if st.session_state.chat_input:
            st.session_state.chat_input = ""

        # Process query
        if user_input:
            with st.spinner("ü§î ƒêang x·ª≠ l√Ω..."):
                response = self.process_query(user_input)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.markdown("**ü§ñ Tr·∫£ l·ªùi:**")
            st.write(response)

            # L∆∞u v√†o l·ªãch s·ª≠ chat
            if "chat_history" not in st.session_state:
                st.session_state.chat_history = []

            st.session_state.chat_history.append({
                "user": user_input,
                "bot": response,
                "timestamp": "now"
            })

        # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
        if "chat_history" in st.session_state and st.session_state.chat_history:
            st.markdown("---")
            st.markdown("**üìù L·ªãch s·ª≠ chat:**")

            # Hi·ªÉn th·ªã 5 tin nh·∫Øn g·∫ßn nh·∫•t
            for i, chat in enumerate(st.session_state.chat_history[-5:]):
                with st.expander(f"üí¨ {chat['user'][:50]}...", expanded=False):
                    st.write(f"**B·∫°n:** {chat['user']}")
                    st.write(f"**Bot:** {chat['bot']}")

            # N√∫t x√≥a l·ªãch s·ª≠
            if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat"):
                st.session_state.chat_history = []
                st.rerun()
